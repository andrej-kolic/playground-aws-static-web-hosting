AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static Website Hosting with S3, CloudFront, and Route53'

Parameters:
  DomainName:
    Type: String
    Description: 'Domain name for the website (e.g., example.com)'
    Default: 'example.com'
    
  SubDomain:
    Type: String
    Description: 'Subdomain for the website (e.g., www)'
    Default: 'www'
    
  Environment:
    Type: String
    Description: 'Environment name'
    Default: 'dev'
    AllowedValues:
      - dev
      - staging
      - prod
      
  CreateSSLCertificate:
    Type: String
    Description: 'Whether to create SSL certificate (requires domain validation)'
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
      
  CreateRoute53Records:
    Type: String
    Description: 'Whether to create Route53 DNS records (requires hosted zone)'
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  CreateSSL: !Equals [!Ref CreateSSLCertificate, 'true']
  CreateDNS: !Equals [!Ref CreateRoute53Records, 'true']
  HasSubDomain: !Not [!Equals [!Ref SubDomain, '']]

Resources:
  # S3 Bucket for website content
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 
        - '${FullDomain}-${Environment}-${AWS::AccountId}'
        - FullDomain: !If 
            - HasSubDomain
            - !Sub '${SubDomain}.${DomainName}'
            - !Ref DomainName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'StaticWebsite'

  # S3 Bucket Policy
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${WebsiteBucket}/*'
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 's3:GetObject'
            Resource: !Sub '${WebsiteBucket}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/*'

  # CloudFront Origin Access Control
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-OAC'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
        Description: 'OAC for static website'

  # SSL Certificate (optional)
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateSSL
    Properties:
      DomainName: !If 
        - HasSubDomain
        - !Sub '${SubDomain}.${DomainName}'
        - !Ref DomainName
      SubjectAlternativeNames:
        - !If 
            - HasSubDomain
            - !Ref DomainName
            - !Sub '*.${DomainName}'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !If 
            - HasSubDomain
            - !Sub '${SubDomain}.${DomainName}'
            - !Ref DomainName
          ValidationDomain: !Ref DomainName
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'StaticWebsite'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
        Enabled: true
        DefaultRootObject: index.html
        Comment: !Sub 'CloudFront distribution for ${AWS::StackName}'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
          DefaultTTL: 86400
          MaxTTL: 31536000
          MinTTL: 0
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        Aliases: !If
          - CreateSSL
          - - !If 
                - HasSubDomain
                - !Sub '${SubDomain}.${DomainName}'
                - !Ref DomainName
          - !Ref 'AWS::NoValue'
        ViewerCertificate: !If
          - CreateSSL
          - AcmCertificateArn: !Ref SSLCertificate
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'StaticWebsite'

  # Route53 Hosted Zone (if creating DNS records)
  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNS
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      Name: !If 
        - HasSubDomain
        - !Sub '${SubDomain}.${DomainName}'
        - !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID
        EvaluateTargetHealth: false

Outputs:
  WebsiteBucketName:
    Description: 'Name of the S3 bucket'
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
      
  WebsiteBucketArn:
    Description: 'ARN of the S3 bucket'
    Value: !GetAtt WebsiteBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BucketArn'
      
  CloudFrontDistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'
      
  CloudFrontDomainName:
    Description: 'CloudFront Distribution Domain Name'
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-DistributionDomainName'
      
  WebsiteURL:
    Description: 'Website URL'
    Value: !If
      - CreateSSL
      - !Sub 
        - 'https://${FullDomain}'
        - FullDomain: !If 
            - HasSubDomain
            - !Sub '${SubDomain}.${DomainName}'
            - !Ref DomainName
      - !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'
      
  SSLCertificateArn:
    Description: 'SSL Certificate ARN'
    Condition: CreateSSL
    Value: !Ref SSLCertificate
    Export:
      Name: !Sub '${AWS::StackName}-SSLCertificateArn'

